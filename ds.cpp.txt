Single and double pointer
Q - Write a program define a float variable f, a 
pointer to f as pf1and a pointer 
to pf1 as pf2(two level pointer). 
Display the value of f using pf1 and pf2. Also display address of f, value of pf1 and pf2.


#include<stdio.h>
#include<stdlib.h>
int main()
{
 float f,*pf1,**pf2;    
 printf("Enter the number\n");
 scanf("%f\n",&f);
 pf1 = &f;
 pf2 = &pf1;
 printf("Value of f = %.3f, *pf1 = %.3f, **pf2 = %.3f\n",f,*pf1,**pf2);
 printf("Address of f = %p, pf1 = %p, pf2 = %p",pf1,pf1,pf2);
 return 0;
}

______________________________________________

Q - Write a C program to sort an array in ascending order.

  #include<stdio.h>
#include<stdlib.h>
int main()
{
 int *arr,i,j,n,t;
 printf("Enter the number of elements in an array\n");
 scanf("%d",&n);
 arr = (int*)calloc(n,sizeof(int));
 printf("Enter the array elements\n");
 for(i=0;i<n;i++)
 {
  scanf("%d",arr+i);     
 }
 for(i=0;i<n;i++)
 {
  for(j=i+1;j<n;j++)
  {
    if(*(arr+i)>*(arr+j))
    {
     t = *(arr+j);
     *(arr+j) = *(arr+i);
     *(arr+i) = t;
    }
  }
 }
 printf("Sorted array\n");
 for(i=0;i<n;i++)
 {
  printf("%d ",*(arr+i));     
 }
 return 0;
}

____________________________________________________

Q - Write program to find the size of char, integer, float & double without using sizeof operator (Hint: Use pointers). 


  #include<stdio.h>
int main()
{
 char a;
 int b;
 float c;
 double d;
 printf("size of char = %d\n",((char*)&a+1-((char*)&a)));
 printf("size of int = %d\n",((int*)(&b+4)-(int*)&b));
 printf("size of float = %d\n",((float*)(&c+4)-(float*)&c));
 printf("size of double = %d\n",((double*)(&d+8)-(double*)&d));
 
 return 0;
}

____________________________________________________________________


Q - Mrs. Anitha , our favourite Maths teacher wanted to teach her students to swap two elements.
Write a C program to accept 2 integers and to swap them.


  #include<stdio.h>
void swap(int* a,int* b)
{
  int t;
  t = *a;
  *a = *b;
  *b = t;
  printf("After swapping\na = %d b = %d",*a,*b);
}
int main()
{
 int a,b;
 printf("Enter the value of a\n");
 scanf("%d\n",&a);
 printf("Enter the value of b\n");
 scanf("%d\n",&b);
 printf("Before swapping\na = %d b = %d\n",a,b);
 swap(&a,&b);
 return 0;
}

___________________________________________________________________________

Q - Write a  program to search for an element ‘a’ in the array. Assume that the maximum size of the array is 15. 


  #include<stdio.h>
#include<stdlib.h>
int main()
{
 int *arr,n,num,i,k=0;
 printf("Enter the number of elements in an array\n");
 scanf("%d",&n);
 arr = (int*)calloc(n,sizeof(int));
 printf("Enter the array elements\n");
 for(i=0;i<n;i++)
 {
    scanf("%d",arr+i); 
 }
 printf("Enter the element to be searched\n");
 scanf("%d",&num);
 for(i=0;i<n;i++)
 {
    if(*(arr+i)==num)
     { k=1;
       break;
     }
    else
    {  
      k=0;    //printf("%d is not present in the array",num);
       //break;
    }
 }
 if(k==1)
  printf("%d is present in the array",num);
 if(k==0)
  printf("%d is not present in the array",num);
   
 return 0; 
}

________________________________________________________________________


Q - Write a program to transpose the given matrix.


  #include<stdio.h>
#include<stdlib.h>
int main()
{
 int *arr,i,j,k,n,l=0;
 printf("Enter order of matrix\n");
 scanf("%d",&n);
 arr = (int*)calloc(n*n,sizeof(int));
 printf("Enter matrix values\n");
 for(i=0;i<n*n;i++)
 {
  scanf("%d",arr+i);     
 }
 printf("The given matrix is\n");
 for(i=0;i<n*n;i++)
 {
   printf("%d",*(arr+i)); 
   if(l!=n-1)
    printf(" ");
   l++;
  if(l==n)
   {
     printf("\n");
     l=0;
   }
 }
 printf("Transpose matrix is\n");
 for(i=0;i<n;i++)
 {
   k=i;
   l=0;
   for(j=0;j<n;j++)
   {
     printf("%d",*(arr+k));
     l++;
     if(l<=n-1)
      printf(" ");
     if(l==n)
       printf("\n");
     k=k+n;
   }
 }
 return 0;
}


______________________________________________________________________


Q - Consider implementing a dynamically sized stack using an array.
 
Create a structure
 
struct stack
{
int * a;
int top;
int maxSize;
};
 


    #include <stdio.h>
#include <stdlib.h>

struct stack
{
    int * a;
    int top;
    int maxSize;
};

void initstack(struct stack * p, int maxSize)
{
    p->top = -1;
    p->maxSize = maxSize;
    p->a = calloc(maxSize, sizeof(int));
}

void push(struct stack *p, int item)
{
    if(p->top == p->maxSize - 1)
        printf("Stack is full\n");
    else
        p->a[++p->top] = item;
}

int pop(struct stack *p)
{
    if(p->top== -1)
    {
        printf("Stack is empty\n");
        return -1000;
    }   
    else
        return p->a[p->top--];
}

void display(struct stack p)
{
    int i = 0;
    if(i > p.top)
        printf(" {}");
    else
        for(i = 0; i <= p.top; i++)
            printf(" %d", p.a[i]);
}

int main()
{
    struct stack p;
    int choice = 1, item, maxSize;
    printf("Enter the maximum size of the stack\n");
    scanf("%d", &maxSize);
    initstack(&p, maxSize);
    while(choice)
    {
        printf("Choice 1 : Push\nChoice 2 : Pop\nChoice 3 : Display\nAny other choice : Exit\nEnter your choice\n");
        scanf("%d", &choice);
        switch(choice)
        {
            case 1:
                printf("Enter the element to be pushed\n");
                scanf("%d", &item);
                push(&p, item);
                break;
            case 2:
                item = pop(&p);
                if(item == -1000)
                    break;
                printf("The popped element is %d\n", item);
                break;
            case 3:
                printf("The contents of the stack are");
                display(p);
                printf("\n");
                break;
            default:
                choice = 0;
        }
    }
    return 0;
}



____________________________________________________________________________________________

Q - Write a program to evaluate an expression entered in “postfix” form using stack concept.

Function Specifications:

void initpostfix(struct postfix * )
void setexpr(struct postfix *, char *)
void push(struct postfix *, int)
int pop(struct postfix *)
void calculate(struct postfix *)
void show(struct postfix )


  #include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>

struct postfix
{
    int stack[50];
    char *s;
    int nn,top;
};
void initpostfix(struct postfix *p)
{
    p->top=-1;
}
void setexpr(struct postfix *p,char *e)
{
    p->s=e;
}
void push(struct postfix *p,int i)
{
    if(p->top==49)
    return;
    else 
    {
        ++p->top;
        p->stack[p->top]=i;
    }
}
int pop(struct postfix *p)
{
    int i;
    if(p->top==-1)
    return 0;
    else
    {
        i=(p->stack[p->top]);
        --(p->top);
        return i;
    }
}
void calculate(struct postfix *p) 
{
    int n1,n2,i=0;
    while (*(p->s+i)!='\0')
    {
        if(isdigit(*(p->s+i))) 
        {
            p->nn=*(p->s+i)-48;
            push(p,p->nn);
        }
        else
        {
            n1=pop(p);
            n2=pop(p);
            switch(*(p->s+i))
            {
                case '+': p->nn=n1+n2;
                break;
                case '-': p->nn=n2-n1;
                break;
                case '*': p->nn=n1*n2;
                break;
                case '/': p->nn=n2/n1;
                break;
                default:printf("invalid operator");
            }
            push(p,p->nn);
        }
        i++;
    }
}
void show(struct postfix p)
{
    printf("Result is: %d",pop(&p));
}
int main()
{
    struct postfix st;
    char exp[50],*e;
    printf("Enter postfix expression to be evaluated:\n");
    scanf("%s",exp);
    e=exp;
    initpostfix(&st);
    setexpr(&st,e);
    calculate(&st);
    show(st);
    return 0;
    
}


__________________________________________________________________________________________

Q - In this program you have to convert an expression given in “infix” form to “postfix” form.
 
Steps to be followed:
Step:1
Create a structure named “infix”. The structure should contain the following data members:
target -a character array of size 50, to store the converted postfix expression.
stack -a character array of size 50, for performing stack operations(push and pop).
s -a string variable, to get the input infix expression.
t -a string variable, whose use is given in initinfix function.
top-an integer variable to store the top value of the stack.
Step:2
In the initinfix function, the data members of the infix structure has to be initialized as follows:
assign top as '-1'.
strcpy ( p -> target, “” ) ;
strcpy ( p -> stack, “” ) ;
equate the address of target array to t.
Equate s to “”.
Step:3
In the setexpr function, equate the input infix expression to s.
Step:4
In the push function,
increment top by 1.
add the passed character in the top position.
Step:5
In the pop function,
assign the element in the top position of the stack to a character variable.
Decrement top by 1.
return the character variable.
Step:6
In the convert function,
Start a while loop to parse the input string character by character ( using the condition “ *( p -> s ) ”).
if the character is a digit or an alphabet, add it to the string t.
if the character is '(' push it to the stack.
if the character is either '*' or '+' or '/' or '%' or '-' or '$',
if the stack is empty, push the operator to the stack.
else
pop an operator
check whether the priority of the operator is >= priority of the character.
If so add the character to t.
Again pop an operator and check the condition.
Repeat this till the condition fails.
Then push the operator and then the character to the stack.
If the character is ')'
pop an element from the stack.
check if the condition, “ ( opr ) != '(' ”, is true.
If so, add the element to t.
Again pop an element and check the condition.
Repeat this till the condition fails.
Close the while loop.
Then add the remaining elements in the stack to t.
And finally end the string, t, using '\0'.
Step:7
In the priority function
if the character is '$', return 3.
if the character is either '*' or '/' or '%', return 2.
if the character is either '+' or '-', return 1.
else return 0.
Step:8
In the show function, print the target.
Step:9
In the main function,
define the required variables.
Call the initinfix function.
Get the infix expression from the user.
Call the setexpr function.
Then call the convert function.
Then display the postfix expression by calling the show function.
End the main function.

Function Specifications:
 
void initinfix(struct infix *)
void setexpr(struct infix *, char * )
void push(struct infix *, char )
char pop(struct infix * )
void convert(struct infix * )
int priority(char )
void show(struct infix )
 



  #include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 50

struct infix
{
	char target[MAX] ;
	char stack[MAX] ;
	char *s, *t ;
	int top ;
} ;

void initinfix ( struct infix * ) ;
void setexpr ( struct infix *, char * ) ;
void push ( struct infix *, char ) ;
char pop ( struct infix * ) ;
void convert ( struct infix * ) ;
int priority ( char ) ;
void show ( struct infix ) ;

int main( )
{
    struct infix p ;
	char expr[MAX] ;
    initinfix ( &p ) ;
    printf ( "\nEnter an expression in infix form: " ) ;
	gets ( expr ) ;

	setexpr ( &p, expr ) ;
	convert ( &p ) ;

	printf ( "\nThe postfix expression is: " ) ;
	show ( p ) ;
    return 0;
}

void initinfix ( struct infix *p )
{
	p -> top = -1 ;
	strcpy ( p -> target, "" ) ;
	strcpy ( p -> stack, "" ) ;
	p -> t = p -> target ;
	p -> s = ""  ;
}

void setexpr ( struct infix *p, char *str )
{
	p -> s = str ;
}

void push ( struct infix *p, char c )
{
	if ( p -> top == MAX )
		printf ( "\nStack is full.\n" ) ;
	else
	{
		p -> top++ ;
		p -> stack[p -> top] = c ;
	}
}

char pop ( struct infix *p )
{
	if ( p -> top == -1 )
	{
		printf ( "\nStack is empty.\n" ) ;
		return -1 ;
	}
	else
	{
		char item = p -> stack[p -> top] ;
		p -> top-- ;
		return item ;
	}
}

void convert ( struct infix *p )
{
    char opr ;

	while ( *( p -> s ) )
	{
		if ( *( p -> s ) == ' ' || *( p -> s ) == '\t' )
		{
			p -> s++ ;
			continue ;
		}
		if ( isdigit ( *( p -> s ) ) || isalpha ( *( p -> s ) ) )
		{
			while ( isdigit ( *( p -> s ) ) || isalpha ( *( p -> s ) ) )
			{
				*( p -> t ) = *( p -> s ) ;
				p -> s++ ;
				p -> t++ ;
			}
		}
		if ( *( p -> s ) == '(' )
		{
			push ( p, *( p -> s ) ) ;
			p -> s++ ;
		}

		if ( *( p -> s ) == '*' || *( p -> s ) == '+' || *( p -> s ) == '/' || *( p -> s ) == '%' || *( p -> s ) == '-' || *( p -> s ) == '$' )
		{
			if ( p -> top != -1 )
			{
				opr = pop ( p ) ;
				while ( priority ( opr ) >= priority ( *( p -> s ) ) )
				{
					*( p -> t ) = opr ;
					p -> t++ ;
					opr = pop ( p ) ;
				}
				push ( p, opr ) ;
				push ( p, *( p -> s ) ) ;
			}
			else
				push ( p, *( p -> s ) ) ;
			p -> s++ ;
		}

		if ( *( p -> s ) == ')' )
		{
			opr = pop ( p ) ;
			while ( ( opr ) != '(' )
			{
				*( p -> t ) = opr ;
				p -> t++ ;
				opr =  pop ( p ) ;
			}
			p -> s++ ;
		}
	}

	while ( p -> top != -1 )
	{
		char opr = pop ( p ) ;
		*( p -> t ) = opr ;
		p -> t++ ;
	}

	*( p -> t ) = '\0' ;
}

int priority ( char c )
{
	if ( c == '$' )
		return 3 ;
	if ( c == '*' || c == '/' || c == '%' )
		return 2 ;
	else
	{
		if ( c == '+' || c == '-' )
			return 1 ;
		else
			return 0 ;
	}
}

void show ( struct infix p )
{
    printf ( "%s", p.target ) ;
}



______________________________________________________________________________________


Q - Write a C program to simulate the working of a queues using an array provide the following operation:
i) Insert ii) Delete iii) Display

Assume that the size of the queue is 5.



  /*#include<stdio.h>
int rear=-1;
int front=0;
void insert(int a[],int x)
{
  a[++rear]=x; 
}
void del_que(int a[])
{
 if(!(front>rear))
 { printf("Element deleted from queue is : ");
  printf("%d",a[front++]);
 }
 printf("\n");
}
void display(int a[])
{
 int i;
 printf("Elements in the Queue :\n");
 for(i=front;i<=rear;i++)
  printf("%d ",a[i]);
 printf("\n");
}
int main()
{
 int a[100],x,ch=1,m;
 while(ch==1)
 {
  printf("1.Insert element to queue\n"); 
  printf("2.Delete element from queue\n"); 
  printf("3.Display all elements of queue\n"); 
  printf("4.Quit\n");
  printf("Enter your choice :\n");
  scanf("%d",&m);
  switch(m)
  {
   case 1:
         if(rear!=5)
          {
           printf("Enter the element to be inserted :\n");
           scanf("%d",&x);
           insert(a,x);
          }
          else
           printf("Queue Overflow\n");
         break;
   case 2:
          if(!(front>rear))
           del_que(a);
          else
           printf("Queue Underflow\n");
          break;
   case 3:
         if(!(front>rear))
          display(a);
         else
          printf("Queue is empty\n");
         break;
   default:
         ch=0;
  } 
 }
 return 0;
}*/
/*#include <stdio.h>
 
#define MAX 50
int queue_array[50];
int rear = - 1;
int front = - 1;
void insert()
{
    int add_item;
    if (rear == MAX - 1)
    printf("Queue Overflow \n");
    else
    {
        if (front == - 1)
        front = 0;
        printf("Enter the element to be inserted :\n");
        scanf("%d", &add_item);
        rear = rear + 1;
        queue_array[rear] = add_item;
    }
}
 
void delete_q()
{
    if (front == - 1 || front > rear)
    {
        printf("Queue Underflow\n");
        return ;
    }
    else
    {
        printf("Element deleted from queue is : %d\n", queue_array[front]);
        front = front + 1;
    }
} 
void display()
{
    int i;
    if (front == - 1||(front>rear))
        printf("Queue is empty\n");
    else
    {
        printf("Elements in the Queue :\n");
        for (i = front; i <= rear; i++)
            printf("%d ", queue_array[i]);
        printf("\n");
    }
}
int main()
{ int ch=1;
    int choice;
    while (ch==1)
    {
        printf("1.Insert element to queue\n");
        printf("2.Delete element from queue\n");
        printf("3.Display all elements of queue\n");
        printf("4.Quit\n");
        printf("Enter your choice :\n");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
            insert();
            break;
            case 2:
            delete_q();
            break;
            case 3:
            display();
            break;
            default:
                 ch=0;
        } 
    } 
    return 0;
}*/
  #include<stdio.h>
#include<stdlib.h>
struct queue
{
    int arr[5];
    int front,rear;
    
};
void init(struct queue *p)
{
    p->front=-1;
    p->rear=-1;
}
void insert(struct queue *p,int item)
{
    if(p->rear==4)
    {
        printf("Queue overflow\n");
        return;
    }
    else
    {
        printf("Enter the element to be inserted :\n");
        scanf("%d",&item);
        if(p->front==-1)
        p->front=0;
        p->rear++;
        p->arr[p->rear]=item;
    }
}
int del(struct queue *p)
{
    int temp;
    if(p->front==-1)
    {
        printf("Queue Underflow\n");
        return -1000;
    }
    temp=p->arr[p->front];
    p->front++;
    if(p->front>p->rear)
    p->front=p->rear=-1;
    return temp;
}
void display(struct queue p)
{
    int i;
    if(p.front==-1)
    printf("Queue is empty\n");
    else
    {
        printf("Elements in the Queue :\n");
        for(i=p.front;i<p.rear;i++)
        printf("%d ",p.arr[i]);
        printf("%d \n",p.arr[p.rear]);
    }
}
int main()
{
    struct queue q;
    int choice,item=-1,p;
    init(&q);
    do
    {
        printf("1.Insert element to queue\n2.Delete element from queue\n3.Display all elements of queue\n4.Quit\nEnter your choice :\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1 : insert(&q,item);
            break;
            case 2 : p=del(&q);
            if(p!=-1000)
            printf("Element deleted from queue is : %d\n",p);
            break;
            case 3 : display(q);
            break;
         //   case 4 : printf("Quit\n");
          //  break;
            default : exit(0);
            break;
        }
    }while(choice==1 || choice==2 || choice==3);
    return 0;
}

________________________________________________________________________________________________--


Q - Write a C program to simulate the working of circular queues with item as strings provide the following operations:
(a) insert, (b) delete, and (c) display.

Consider implementing a fixed size circular queue of maximum size 5 using an array.

Check the following conditions:
If Queue is empty, print "Queue is empty".
If Queue is full, print "Queue is full"
If no element in the Queue, print "The contents of the queue are {}"


Note: Refer the sample input and output.
Bold letters represents input.



  #include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAXSIZE 5
struct queue
{
    char alpha[MAXSIZE][200];
    int front;
    int rear;
};
void insert(struct queue* p,char s[])
{
    if(p->front==-1)
    p->front=0;
    p->rear=(p->rear+1)%MAXSIZE;
    strcpy(p->alpha[p->rear],s);
}
void delete(struct queue* p)
{
    printf("The deleted element is %s\n",p->alpha[p->front]);
    if(p->front==(p->rear))
    {
        p->front=-1;
        p->rear=-1;
    }
    else
    {
       p->front=(p->front+1)%MAXSIZE;
       
    }
}
void display(struct queue p)
{
    int i;
    for(i=p.front;i<=p.rear;i++)
    printf(" %s",p.alpha[i]);

    printf("\n");
}
int main()
{
    struct queue p;
    p.front=p.rear=-1;
    char s[5];
    int ch;
    while(1)
    {
        printf("Choice 1 : Enter element into Queue\nChoice 2 : Delete element from Queue\nChoice 3 : Display\nAny other choice : Exit\nEnter your choice\n");
        scanf("%d",&ch);
        if(ch==1)
        {
            if((p.front==p.rear+1)||(p.front==0&&p.rear==MAXSIZE-1))
            printf("Queue is full\n");
            else
            {
                printf("Enter the string to be inserted = \n");
                scanf("%s",s);
                insert(&p,s);
            }
        }
        else if(ch==2)
        {
            if(p.front==-1)
            printf("Queue is empty\n");
            else
            delete(&p);
        }
        else if(ch==3)
        {
            if(p.front==-1)
            printf("The contents of the queue are {}\n");
            else
            {
                printf("The contents of the queue are");
                display(p);
            }
        }
        else
        exit(0);
    }
    return 0;
}

_______________________________________________________________________________________________________

Q - Consider implementing a stack using a Linked List.
 
Create a sructure
 
struct node {
int data ;
struct node * link ;
} ;
 
Write a program to implement push and pop operation on stack and to display the contents of the stack.
 
Print the message “Stack is empty” in the pop function and return the value -1000 when an attempt is made to pop data from an empty stack.
 
Refer function specifications for further details.




    #include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node * link;
};

void push(struct node **, int);
int pop(struct node **);
void display(struct node *);
void printMenu();

int main()
{
    struct node * p;
    p = NULL;
    int data, ch, data1;
    //char choice[10];
    do 
    {
        printMenu();

        printf("Enter your choice\n");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("Enter the element to be pushed\n");
            scanf("%d", &data);
            push(&p, data);
            break;
        case 2:
            data1 = pop(&p);
            if (data1 != -1000)
                printf("The popped element is %d\n", data1);
            break;
        case 3:
            printf("The contents of the stack are");
            display(p);
            printf("\n");
            break;
        default:
            return 0;
        }
    } while (1);
    return 0;
}

void printMenu()
{
    printf("Choice 1 : Push\n");
    printf("Choice 2 : Pop\n");
    printf("Choice 3 : Display\n");
    printf("Any other choice : Exit\n");
}

void push(struct node **q, int num)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->link = (*q);
    temp->data = num;
    (*q) = temp;
}


void display(struct node *q)
{
    //Fill in the code here
    struct node *temp = q;
    if (temp == NULL)
        printf(" {}");
    while (temp != NULL)
    {
        printf(" %d", temp->data);
        temp = temp->link;
    }
}

int pop(struct node **q)
{
    //Fill in the code here
    struct node *temp;
    int item;
    if (*q == NULL)
    {
        printf("Stack is empty\n");
        return -1000;
    }
    temp = *q;
    item = temp->data;
    *q = (*q)->link;
    free(temp);
    return item;
}


____________________________________________________________________________________________________________

Q - Write a C program using dynamic variables and pointers, to construct a singly linked list. The operations to be supported are:
a) Insert at the front of a list.
b) Insert at any position in the list.
c) Deleting a node based on specified value.
d) Searching a node based on specified value.
e) Displaying all the nodes in the list.


In certain cases print the message as mentioned in the sample input and output. Example: if "8" is an element to be deleted and 8 is not present in the list, then print the message as "8 is not present in the linked list"
If you are searching an element in the list for example 5 is the element to be searched and the element is not present then print "5 is not present in the list".





#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *link;
};
typedef struct node* NODE;
NODE create()
{
    NODE p;
    p=(NODE)malloc(sizeof(struct node));
    if(p==NULL)
    {
        printf("allocation failed\n");
    return 0;
    }
    else
    return p;
}
void nodefree(NODE x)
{
    free(x);
}
NODE insertfront(NODE first)
{int item;
    NODE temp;
    temp=create();
    printf("Enter the element to be inserted :\n");
    scanf("%d",&item);
    temp->data=item;
    temp->link=NULL;
    if(first==NULL)
    {
        return temp;
    }
    else
    {
    temp->link=first;
    return temp;
    }
    
}

void insertany(NODE first)
{int item,count=1,pos;//num=1;
NODE temp,cur,prev;//next;
    
    temp=create();
    printf("Enter the position at which you want to add another node\n");
    scanf("%d",&pos);
    printf("Enter the element to be inserted :\n");
    scanf("%d",&item);
    cur=first;
    prev=first;
    while(cur->link!=NULL && count!=pos)
    {    prev=cur;
        cur=cur->link;
        count++;
    }
    if(count==pos)
    {
        temp->data=item;
        temp->link=prev->link;
        prev->link=temp;
    }
    else if(pos==count+1)
    {
        temp->data=item;
        temp->link=cur->link;
        cur->link=temp;
    }
    else if(pos>=count+1)
    {
        printf("There are less than %d elements in the linked list\n",pos);
    }
  
}

void display(NODE first)
{NODE cur;
    if(first == NULL)
    {
        printf(" {}\n");
        return;
    }
    else if(first->link==NULL)
    {
        printf(" {}\n");
        return;
    }
   
    else
    {
        cur=first;
        while(cur!=NULL)
        {
            
            printf(" %d",cur->data);
            cur=cur->link;
        }
        
    printf("\n");
    }
}

void deleteany(NODE first)
{   int item; 
NODE temp,cur;
    printf("Enter the element to be deleted : \n");
    scanf("%d",&item);
    if(first==NULL)
    {
        printf("Linked list is empty\n");
    }
    else if(first->data==item)
    {
      temp=first;
      first=first->link;
     
      nodefree(temp);
    }
    else
    {
      cur=temp=first;
      while(cur->link!=NULL && cur->data!=item)
      {
          temp=cur;
          cur=cur->link;
      }
      if(cur->data==item)
      {
          temp->link=cur->link;
          nodefree(temp);
      }
      else{
          printf("%d is not present in the linked list\n",item);      }
    }
    
}


void search(NODE first)
{NODE temp;
int item;
    printf("Enter the element to be searched :\n");
    scanf("%d",&item);
    temp=first;
    while(temp!=NULL && temp->data!=item)
    {
        temp=temp->link;
    }
   
   if(temp==NULL)
   {
       printf("%d is not present in the linked list\n",item);
   }
   else if(temp->data==item)
   {
       printf("element found\n");
   }
}

int main()
{
    int ch;
    NODE first;
    first=NULL;
    printf("1 - Add at Beginning\n2 - Add at position\n3 - Delete any node\n4 - search and update\n5 - Display\n6 - Exit\n");
    for(;;)
    {
        printf("Enter your choice :\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: first=insertfront(first);
            break;
            case 2: insertany(first);
            break;
            case 3: deleteany(first);
            break;
            case 4:search(first);
            break;
            case 5:printf("Elements in the List are");
            display(first);
            break;
            case 6:exit(0);
            break;
            default:printf("Choice is incorrect, Enter a correct choice\n");
        
            break;
        
            
        }
    }
    return 0;
}


___________________________________________________________________________________________________________--


Q - Write a C program to support the following operations on a doubly linked list where each node consists of integers.
a) Create a doubly linked list by adding each node at the front.
b) Insert a new node to the left of the node whose key value is read as an input.
c) Delete the node of a given data, if it is found, otherwise display appropriate message.
d) Display the contents of the list. 


Input and Output Format:
Refer sample input and output for formatting specifications.
Note that if the list is empty, print “The elements in the doubly linked list are {}”.
[All text in bold corresponds to input and the rest corresponds to output]






#include<stdio.h>
#include<stdlib.h>

struct LinkedList
{
    
    int data;
    struct LinkedList *next;
    struct LinkedList *prev;
    
};
typedef struct LinkedList list;

void InsertFront(list *head, int val);
void AddBefore(list *head, int val1, int val2);
void Delete(list *head, int val);
void Display(list *head);

int main()
{
    
    int flag = 1, op, el, val;
    
    list *head = (list *) malloc(sizeof(list));
    head->next = NULL;
    head->prev = NULL;
    
    printf("1 - Add at Beginning\n2 - Add after a particular value\n3 - Delete a node with the given value\n4 - Display\n5 - Exit\n");
    
    while(flag)
    {
        
        printf("Enter your choice : \n");
        scanf("%d", &op);
        
        switch(op)
        {
            
            case 1: printf("Enter the value\n");
                    scanf("%d", &el);
                    InsertFront(head, el);
                    break;
            
            case 2: printf("Enter the value\n");
                    scanf("%d", &el);
                    printf("Enter the value to the left of which you want to add another node\n");
                    scanf("%d", &val);
                    AddBefore(head, val, el); 
                    break;
            
            case 3: printf("Enter the value to delete : \n");
                    scanf("%d", &el);
                    Delete(head, el);
                    break;
            
            case 4: Display(head);
                    break;
            
            case 5: flag = 0;
                    break;
                    
            default: printf("Choice is incorrect, Enter a correct choice\n");
                     break;
            
        }
        
    }
    
    return 0;
}


void InsertFront(list *head, int val){
  
     list *newNode = (list *) malloc(sizeof(list));
 
     if(head->next == NULL)
     {
         newNode->data = val;
         newNode->prev = head;
         newNode->next = NULL;
         head->next = newNode;
         return;
     }
     
     newNode->data = val;
     head->next->prev = newNode;
     newNode->next = head->next;
     head->next = newNode;
     newNode->prev = head;
    
}

void AddBefore(list *head, int val1, int val2)
{
       
       list *node = (list *) malloc(sizeof(list));
       
       if(head->next == NULL)
       {
           printf("%d is not present in the list\n", val1);
           return;
       }
       
       head = head->next;
       
       while(head != NULL)
       {
           
           if(head->data == val1)
           {
               
               node->data = val2;
               node->next = head;
               node->prev = head->prev;
               head->prev->next = node;
               head->prev = node;
               
               return;
           }
           else
           {
               head = head->next;
           }
           
       }
     
       printf("%d is not present in the list\n", val1);
}


void Delete(list *head, int val)
{
      
       if(head->next == NULL)
       {
           printf("%d is not present n the list\n", val);
       }   
    
       head = head->next;
       
       while(head != NULL)
       {
           
           if(head->data == val)
           {
               
               if(head->next == NULL)
               {
                   head->prev->next = head->next;
                   free(head);
                   return;
               }
               
               head->prev->next = head->next; 
               head->next->prev = head->prev;
               free(head);
                
               return;
           }
           else
           {
               head = head->next;
           }
           
       }
       
       printf("%d is not present n the list\n", val);
    
}


void Display(list *head)
{
    
    if(head->next == NULL)
    {
        printf("The elements in the doubly linked list are {}\n");
        return;
    }
    
    printf("The elements in the doubly linked list are ");
    while(head->next != NULL)
    {
        
        if(head->next->next == NULL)
        {
            printf("%d", head->next->data);
            break;
        }
        printf("%d ", head->next->data);
        head = head->next; 
     }
     
     printf("\n");
    
}





_________________________________________________________________________________________________________-





Q - Implement a C program to construct a Binary Search Tree and also display the elements in the tree using Inorder , Preorder and Postorder traversals.

Create a structure
 
 struct tnode {
	int data;
	struct tnode * leftc;
	struct tnode * rightc;
};
 
 
Binary Search tree is a binary tree in which each internal node x stores an element such that the element stored in the left subtree of x are less than x and elements stored in the right subtree of x are greater than or equal to x. This is called binary-search-tree property.
 




    #include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct tnode {
          int data;
          struct tnode * leftc;
          struct tnode * rightc;
};

void insert(struct tnode **, int num);
void inorder(struct tnode *);
void preorder(struct tnode *);
void postorder(struct tnode *);

int main() {
          struct tnode * root=NULL;
          char ch[5];
          int num;
          do  {
                   printf("Enter the element to be inserted in the tree\n");
                   scanf("%d",&num);
                   insert(&root, num);
                   printf("Do you want to insert another element?\n");
                   scanf("%s",ch);
          }while(strcmp(ch,"yes")==0);
          printf("Inorder Traversal : The elements in the tree are");
          inorder(root);
          printf("\n");
          printf("Preorder Traversal : The elements in the tree are");
          preorder(root);
          printf("\n");
          printf("Postorder Traversal : The elements in the tree are");
          postorder(root);
          printf("\n");
          return 0;
}

void insert(struct tnode ** s, int num) {
    if(*s==NULL)
    {
        (*s)=(struct tnode *)malloc(sizeof(struct tnode));
        (*s)->data=num;
        (*s)->leftc=NULL;
        (*s)->rightc=NULL;
    }
    else
    {
        if((*s)->data>num)
            insert(&(*s)->leftc,num);
        else
            insert(&(*s)->rightc,num);
    }
   
}

void inorder(struct tnode * s)  {
    if(s==NULL)
        return;
    else
    {
        inorder(s->leftc);
        printf(" %d",s->data);
        inorder(s->rightc);
    }
}

void preorder(struct tnode * s) {
    if(s==NULL)
        return;
    else
    {
        printf(" %d",s->data);
        preorder(s->leftc);
        preorder(s->rightc);
    }
}

void postorder(struct tnode * s) {
    if(s==NULL)
        return;
    else
    {
        postorder(s->leftc);
        postorder(s->rightc);
        printf(" %d",s->data);
    }
}

